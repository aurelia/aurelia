version: 2.1

orbs:
  common: aurelia/common@volatile
  browser-tools: circleci/browser-tools@1.1.0

# # # # # # # # # # # # # # # #
# - Scalar variables -
# # # # # # # # # # # # # # # #
scalar-1: &working_dir ~/repo

# # # # # # # # # # # # # # # #
# - Map variables -
# # # # # # # # # # # # # # # #
map-1: &filter_ignore_develop_release
  filters:
    branches:
      ignore:
        - develop
        - release

map-2: &filter_only_master
  filters:
    branches:
      only:
        - master

map-3: &filter_only_release
  filters:
    branches:
      only:
        - release

map-4: &filter_only_develop
  filters:
    branches:
      only:
        - develop

map-5: &filter_only_tag
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9]+(\.[0-9]+)*(-[\w]+\.[0-9]+)?$/

map-6: &filter_only_topic
  filters:
    branches:
      ignore:
        - master
        - develop
        - release
    tags:
      ignore: /.*/

# # # # # # # # # # # # # # # #
# - Executors -
# # # # # # # # # # # # # # # #
executors:

  docker-circleci:
    parameters:
      node:
        type: string
        default: "16.14.2"
    working_directory: *working_dir
    resource_class: large
    docker:
      - image: "cimg/node:<< parameters.node >>-browsers"

  docker-release:
    working_directory: *working_dir
    resource_class: large
    docker:
      - image: "cimg/node:16.14.2"

  docker-circleci-bench:
    working_directory: *working_dir
    resource_class: large
    docker:
      - image: "cimg/node:16.14.2-browsers"

# # # # # # # # # # # # # # # #
# - Commands -
# # # # # # # # # # # # # # # #
commands:

  checkout_install:
    parameters:
      install_drivers:
        type: boolean
        default: true
    steps:
      - when:
          condition: <<parameters.install_drivers>>
          steps:
            - browser-tools/install-browser-tools
      - checkout
      - run: echo 'export PREFERRED_WORKSPACE_MANAGER=yarn' >> $BASH_ENV
      - run: npm ci

  checkout_install_build_bundle_publish_verdaccio:
    parameters:
      from:
        type: string
      to:
        type: string
      channel:
        type: string
      suffix:
        type: string
        default: ""
      registry:
        type: string
        default: "http://localhost:4873"
    steps:
      - common/configure_git
      - checkout_install
      - run: npm run build:release
      # - run: npm run change-tsconfigs:invert
      # - run: npm run build:release
      # - run: npm run change-tsconfigs:restore
      - run: npm run generate-native-modules
      - clean_merge_commit_dist:
          from: << parameters.from >>
          to: << parameters.to >>
          channel: << parameters.channel >>
          suffix: << parameters.suffix >>
      - common/setup_verdaccio
      - run: npm config set registry << parameters.registry >>
      - run: npm run publish:<< parameters.channel >>

  clean_merge_commit_dist:
    parameters:
      from:
        type: string
      to:
        type: string
      channel:
        type: string
      suffix:
        type: string
        default: ""
      message:
        type: string
        default: "chore(all): add latest build artifacts"
      merge_topic:
        type: boolean
        default: true
      bump_version:
        type: boolean
        default: true
    steps:
      - run: set -o pipefail && git add packages/*/dist packages-cjs/*/dist --force && git status
      - run: set -o pipefail && git stash && git status
      - when:
          condition: << parameters.merge_topic >>
          steps:
            - run: set -o pipefail && git checkout << parameters.from >> && git status
            - run: set -o pipefail && git merge ${CIRCLE_BRANCH}
      - run: set -o pipefail && git checkout << parameters.to >> && git status
      - run: set -o pipefail && git reset --hard origin/<< parameters.to >> && git status
      - run: set -o pipefail && git merge << parameters.from >> --no-ff --no-edit -Xtheirs && git status
      - run: set -o pipefail && rm -rf packages/*/dist packages-cjs/*/dist && git status
      - run: set -o pipefail && git add . && git status
      - run: set -o pipefail && git checkout stash -- . && git status
      - run: set -o pipefail && git add packages/*/dist packages-cjs/*/dist --force && git status
      - run: set -o pipefail && npm run change-package-refs:release -- none
      - when:
          condition: << parameters.bump_version >>
          steps:
            - run: set -o pipefail && npm run bump-version:<< parameters.channel >> -- << parameters.suffix >>
      - run: set -o pipefail && git add . && git status
      - run: set -o pipefail && git commit --allow-empty -m "<< parameters.message >>" && git status

# # # # # # # # # # # # # # # #
# - Jobs -
# # # # # # # # # # # # # # # #
jobs:

  unit_test_esm:
    parameters:
      coverage:
        type: boolean
        default: true
      npm_command:
        type: string
        default: "test"
    executor: docker-circleci
    parallelism: 4
    steps:
      - checkout_install
      - run: npm run build:test
      - run:
          name: "Split test glob"
          command: |
            echo $(circleci tests glob "packages/__tests__/dist/**/*.spec.js" | circleci tests split)
            echo $(circleci tests glob "packages/__tests__/dist/**/*.spec.js" | circleci tests split) > packages/__tests__/tests.txt
      - run:
          name: "Run unit tests"
          command: |
            cd packages/__tests__
            npm run << parameters.npm_command >>

      - when:
          condition: << parameters.coverage >>
          steps:
            - run:
                name: "Process coverage for Codecov"
                command: |
                  node_modules/codecov/bin/codecov -f packages/__tests__/coverage/coverage-final.json
                when: always
            - store_test_results:
                path: packages/__tests__/coverage
            - store_artifacts:
                path: packages/__tests__/coverage

  unit_test_esm_node:
    executor: docker-circleci
    parallelism: 4
    steps:
      - checkout
      - run: echo 'export PREFERRED_WORKSPACE_MANAGER=yarn' >> $BASH_ENV
      - run: npm ci
      - run: npm run build:test
      - run:
          name: "Split test glob"
          command: |
            cd packages/__tests__
            echo $(circleci tests glob "dist/**/*.spec.js" | circleci tests split)
            echo $(circleci tests glob "dist/**/*.spec.js" | circleci tests split) > tests.txt
      - run:
          name: "Run unit tests"
          command: |
            cd packages/__tests__
            npm run ::mocha -- $(cat tests.txt)

  unit_test_cjs:
    parameters:
      npm_command:
        type: string
        default: "test"
      submodules:
        type: boolean
        default: false
    executor: docker-circleci
    steps:
      - checkout_install
      - run: npm run build
      - run: npm run change-tsconfigs:invert
      - run: npm run build
      - run: npm run change-tsconfigs:restore
      - run: npm run change-package-refs:release -- none
      - when:
          condition: << parameters.submodules >>
          steps:
            - run:
                name: "Pull Submodules"
                command: |
                  git submodule init
                  git submodule update --remote
      - run:
          name: "Run unit tests"
          command: |
            cd packages-cjs/__tests__
            npm run << parameters.npm_command >>

  lint_packages:
    executor: docker-circleci
    steps:
      - checkout_install
      - run: npm run lint:packages:ci
      - run: npm run lint:other:ci

  merge_and_dist:
    executor: docker-release
    parameters:
      from:
        type: string
      to:
        type: string
      channel:
        type: string
      push:
        type: boolean
        default: false
      merge_topic:
        type: boolean
        default: true
      bump_version:
        type: boolean
        default: true
      dist_file_name:
        type: string
        default: dist
    steps:
      - run: git config --global user.email "aurelia@bluespire.com"
      - run: git config --global user.name "AureliaEffect"
      - run: git config --global core.mergeoptions "--no-edit"
      - checkout_install:
          install_drivers: false
      - run: set -o pipefail && npm run build:release
      # - run: set -o pipefail && npm run change-tsconfigs:invert
      # - run: set -o pipefail && npm run build:release
      # - run: set -o pipefail && npm run change-tsconfigs:restore
      - run: set -o pipefail && npm run generate-native-modules
      - clean_merge_commit_dist:
          from: << parameters.from >>
          to: << parameters.to >>
          channel: << parameters.channel >>
          merge_topic: << parameters.merge_topic >>
          bump_version: << parameters.bump_version >>
      - when:
          condition: << parameters.push >>
          steps:
            - run: git push origin << parameters.to >>
      - run: zip -r << parameters.dist_file_name >>.zip packages/*/dist packages/*/package.json
      - store_artifacts:
          path: << parameters.dist_file_name >>.zip
          destination: << parameters.dist_file_name >>.zip

  publish_npm:
    executor: docker-release
    parameters:
      channel:
        type: string
      branch:
        type: string
      swap:
        type: boolean
        default: false
    steps:
      - checkout_install:
          install_drivers: false
      - run: git checkout -- .
      - when:
          condition: << parameters.swap >>
          steps:
            - run: git checkout << parameters.branch >>
            - run: git pull
      - run: zip -r publish_npm_<< parameters.channel>>.zip packages/*/dist packages/*/package.json
      - store_artifacts:
          path: publish_npm_<< parameters.channel>>.zip
          destination: publish_npm_<< parameters.channel>>.zip
      - run:
          name: "Authenticate with registry"
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run: npm run publish:<< parameters.channel >>

  # Standalone playwright test jobs
  e2e_playwright:
    executor: docker-circleci
    parameters:
      path:
        type: string
      suite:
        type: string
        default: "examples"
      use_verdaccio:
        type: boolean
        default: true
      registry:
        type: string
        default: "http://localhost:4873"
    steps:
      - checkout_install_build_bundle_publish_verdaccio:
          from: ${CIRCLE_BRANCH}
          to: develop
          channel: dev
          suffix: "-${CIRCLE_BUILD_NUM}"
      - run:
          name: "Install playwright"
          command: |
            cd test/playwright
            npm ci
      - when:
          condition: << parameters.use_verdaccio >>
          steps:
            - run:
                name: "Install app via verdaccio"
                command: |
                  cd << parameters.path >>
                  npm i --registry << parameters.registry >>
      - unless:
          condition: << parameters.use_verdaccio >>
          steps:
            - run:
                name: "Install app via npm"
                command: |
                  cd << parameters.path >>
                  npm i
      - run:
          name: "Build test app"
          command: |
            cd << parameters.path >>
            npm run build
      - run:
          name: "Serve playwright test app"
          background: true
          command: |
            cd << parameters.path >>
            npm run serve
      - run:
          name: "Run playwright test"
          command: |
            cd test/playwright
            npm run build
            npm run e2e:<< parameters.suite >>

  js_framework_benchmark:
    executor: docker-circleci-bench
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - run:
          name: "Print browser tools version"
          command: |
            node --version
            java --version
            google-chrome --version
      - run:
          name: "Benchmark all"
          command: |
            npm run init
            cd test/js-framework-benchmark
            npm run ci
      # - store_test_results:
      #     path: test/js-framework-benchmark/webdriver-ts-results/table.html
      - store_artifacts:
          path: test/js-framework-benchmark/webdriver-ts-results/table.html
      - run:
          name: "Post benchmark result to comment"
          command: npx ts-node scripts/post-benchmark-result.ts

  # benchmark using playwright setup
  benchmark_playwright:
    executor: docker-circleci
    steps:
      - checkout
      - run: git checkout master
      - run: CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
      - run: npm ci
      - run: npm run build
      - run:
          name: "Prepare cosmos db configuration and run test for the master branch"
          # TODO(Sayan): remove the duplication of config, which was done for backward compatibility, and can be removed once PR #1094 is merged with master.
          command: |
            cd test/benchmarking-apps/runner
            echo "{\"cosmosEndpoint\": \"https://aurelia.documents.azure.com:443/\",\"cosmosKey\": \"$AZURE_COSMOS_DB_KEY\", \"endpoint\": \"https://aurelia.documents.azure.com:443/\",\"key\": \"$AZURE_COSMOS_DB_KEY\"}" > cosmos.config.json
            set -o pipefail && node dist/run-benchmarks --i 2 --storage json
      - run: cd ../../../
      - checkout_install
      - run: npm run build
      - run:
          name: "Run test for the current branch"
          command: |
            cd test/benchmarking-apps/runner
            set -o pipefail && node dist/run-benchmarks --i 2 --storage json
      # source: https://support.circleci.com/hc/en-us/articles/360048170573-Auto-comment-on-GitHub-Pull-Requests
      # - run:
      #     name: Post benchmarking comparison link to GitHub PR
      #     command: |
      #       sudo apt-get install jq

      #       pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH" -H "Authorization: token $GITHUB_TOKEN")

      #       if [ $(echo $pr_response | jq length) -eq 0 ]; then
      #         echo "No PR found to update"
      #       else
      #         pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")

      #         git checkout master
      #         master_commit=$(git rev-parse HEAD)

      #         comparison_url="https://au2-bench-viewer.azurewebsites.net/compare?branch=master&commit=$master_commit&branch=$CIRCLE_BRANCH&commit=$CIRCLE_SHA1"
      #         curl --location --request POST "$pr_comment_url" \
      #         -H 'Content-Type: application/json' \
      #         -H "Authorization: token $GITHUB_TOKEN" \
      #         --data-raw "{
      #         \"body\": \"The benchmarking comparison can be found here: $comparison_url\"
      #         }"
      #       fi

  # on branches that only touches doc
  # there's no need to run the workflow
  check_doc_abort:
    executor: docker-circleci
    environment:
      COMMIT_RANGE: << pipeline.git.base_revision >>..<<pipeline.git.revision>>
    steps:
      - checkout
      - run: |
          # Extract commit range (or single commit)
          echo "commit range from CircleCI: ${COMMIT_RANGE}"

          if [[ -n ${CIRCLE_PR_NUMBER} ]]; then
            curl -L "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" \
              -o jq
            chmod +x jq
            url="https://api.github.com/repos/org/repo/pulls/$CIRCLE_PR_NUMBER?access_token=$GITHUB_TOKEN"
            TARGET_BRANCH=$(curl "$url" | ./jq '.base.ref' | tr -d '"')
            echo "Target branch: $TARGET_BRANCH"
            COMMIT_RANGE=$(echo "$CIRCLE_SHA1..$TARGET_BRANCH")
          fi

          echo "Normalized commit range: $COMMIT_RANGE"

          echo "File changed count: $(git diff --name-only $COMMIT_RANGE | grep -v '*' -c)"
          echo "Non doc file changes: $(git diff --name-only $COMMIT_RANGE | grep -v '^doc' -c)"

          if [[ $(git diff --name-only $COMMIT_RANGE | grep -v '*' -c) -gt 0 ]] && [[ $(git diff --name-only $COMMIT_RANGE | grep -v '^doc' -c) -eq 0 ]]; then
            echo "There is only doc work, cancelling workflow..."
            curl --request POST \
              --url https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN

          else
            echo "There are more than doc changes, running workflow $CIRCLE_WORKFLOW_ID..."
          fi

# # # # # # # # # # # # # # # #
# - Workflows -
# # # # # # # # # # # # # # # #
workflows:
  # Runs build and tests
  # Triggered by push to master or topic branches
  build_test:
    jobs:
      - check_doc_abort:
          <<: *filter_ignore_develop_release
      - unit_test_esm:
          <<: *filter_ignore_develop_release
          name: unit_test_esm_chrome
          npm_command: "test-chrome"
          requires:
            - check_doc_abort
      - unit_test_esm:
          <<: *filter_ignore_develop_release
          name: unit_test_esm_firefox
          npm_command: "test-firefox"
          coverage: false
          requires:
            - check_doc_abort
      - unit_test_esm_node:
          <<: *filter_ignore_develop_release
          requires:
            - check_doc_abort
      - unit_test_cjs:
          <<: *filter_ignore_develop_release
          npm_command: "test-node"
          requires:
            - check_doc_abort
      #- unit_test_aot:
      #   <<: *filter_ignore_develop_release
      #   name: test_test262
      #   npm_command: "test-262"
      #   coverage: false
      #   submodules: true

      - lint_packages:
          <<: *filter_ignore_develop_release
          requires:
            - check_doc_abort
      # - js_framework_benchmark:
      #     <<: *filter_ignore_develop_release
      #     requires:
      #       - check_doc_abort

      # - benchmark_playwright:
      #     <<: *filter_ignore_develop_release
      #     requires:
      #       - check_doc_abort
      - e2e_playwright:
          <<: *filter_ignore_develop_release
          name: jit-webpack-conventions-ts
          path: "examples/jit-webpack-conventions-ts"
          requires:
            - check_doc_abort
      - e2e_playwright:
          <<: *filter_ignore_develop_release
          name: jit-webpack-vanilla-ts
          path: "examples/jit-webpack-vanilla-ts"
          requires:
            - check_doc_abort
      - merge_and_dist:
          <<: *filter_only_master
          name: merge_and_dist_master
          requires:
            - check_doc_abort
            - unit_test_esm_chrome
            - unit_test_esm_firefox
            - unit_test_esm_node
            - unit_test_cjs
            #- test_test262
            # - lint_packages
            - jit-webpack-conventions-ts
            - jit-webpack-vanilla-ts
          from: master
          to: develop
          channel: dev
          push: true
          merge_topic: false
      - merge_and_dist:
          <<: *filter_only_topic
          name: merge_and_dist_topic
          requires:
            - check_doc_abort
          from: master
          to: develop
          channel: dev
          dist_file_name: merge_and_dist_topic
      - publish_npm:
          <<: *filter_only_master
          name: "publish_npm_dev"
          channel: dev
          branch: develop
          swap: true
          requires:
            - merge_and_dist_master

  # Runs build and tests, and pushes the built artifacts to the release branch (which then triggers publish_latest)
  # Triggered by push to tag
  build_test_push_release:
    jobs:
      - unit_test_esm:
          <<: *filter_only_tag
          name: unit_test_esm_chrome
          npm_command: "test-chrome"
      - unit_test_esm:
          <<: *filter_only_tag
          name: unit_test_esm_firefox
          npm_command: "test-firefox"
          coverage: false
      - unit_test_esm_node:
          <<: *filter_only_tag
          name: unit_test_esm_node
      - unit_test_cjs:
         <<: *filter_only_tag
         npm_command: "test-node"
      #- unit_test_aot:
      #   <<: *filter_only_tag
      #   name: test_test262
      #   npm_command: "test-262"
      #   coverage: false
      #   submodules: true
      - lint_packages:
          <<: *filter_only_tag
      - merge_and_dist:
          <<: *filter_only_tag
          requires:
            - unit_test_esm_chrome
            - unit_test_esm_firefox
            - unit_test_esm_node
            - unit_test_cjs
            #- test_test262
            # - lint_packages
          from: $CIRCLE_TAG
          to: release
          channel: latest
          push: true
          merge_topic: false
          bump_version: false

  # Asks for manual approval and then publishes from the release branch to npm@latest
  # Triggered by push to release branch
  publish_latest:
    jobs:
      # artifacts are already prepared and committed by the tag workflow, so only approval + publish remains
      - request_publish_latest:
          <<: *filter_only_release
          type: approval
      - publish_npm:
          <<: *filter_only_release
          name: "publish_npm_latest"
          channel: latest
          branch: release
          requires:
            - request_publish_latest
