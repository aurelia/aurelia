# Defaults for all jobs

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: aureliaeffect/circleci-v2:latest

# Variables
var_1: &cache_key aurelia-{{ .Branch }}-{{ checksum "package-lock.json" }}

# Reusable steps
aliases:
  - &step_restore_cache
    restore_cache:
      key: *cache_key
  - &step_attach_workspace
    attach_workspace:
      at: ~/repo
  - &step_install_e2e_bs
    run:
      name: Install e2e tests
      command: |
        cd ./test/e2e
        npm ci
        npm run build
  - &step_serve_e2e_bs
    run:
      name: Serve the e2e app in the background
      background: true
      command: |
        cd ./test/e2e
        npm run start
  - &step_bootstrap_build
    run:
      name: Bootstrap and build the packages
      command: |
        npm run bootstrap
        npm run build

version: 2
jobs:
  install:
    <<: *defaults
    steps:
      - run:
          name: "Show npm and node versions"
          command: |
            node --version
            npm --version
      - checkout
      - run:
          name: "Install npm packages"
          command: |
            npm ci -dd
      - save_cache:
          key: *cache_key
          paths:
            - node_modules

  build:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_bootstrap_build
      - run:
          name: "Create bundles with rollup"
          command: |
            npm run bundle:all
      - run:
          name: "Create tarballs from the build outputs"
          command: |
            npm run publish:local
      - persist_to_workspace:
          root: ~/repo
          paths:
            - dist
            - packages/*/dist
            - packages/*/node_modules
            - packages/*/*.tgz

  unit_tests_firefox:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - run:
          name: "Run unit tests"
          command: |
            npm run test-firefox
          environment:
            TS_NODE_PROJECT: ./scripts/tsconfig.json
      - store_test_results:
          path: ~/repo/coverage
      - store_artifacts:
          path: ~/repo/coverage

  unit_tests_chrome:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - run:
          name: "Run unit tests"
          command: |
            npm run test
          environment:
            TS_NODE_PROJECT: ./scripts/tsconfig.json
      - run:
          name: Combine coverage reports
          command: |
            npm run combine-coverage:json
            npm run combine-coverage:lcov
          when: always
      - run:
          name: Process coverage results for Code Climate
          command: |
            ~/cc-test-reporter format-coverage ~/repo/coverage/lcov.info -t lcov -o ~/repo/coverage/cc-final.json
            ~/cc-test-reporter upload-coverage -i ~/repo/coverage/cc-final.json
          environment:
            CC_TEST_REPORTER_ID: 29ad19bd108faacbd91b36265a5b5e891b404571ebf937f40655157877aa71a1
          when: always
      - run:
          name: Process coverage for Codecov
          command: |
            codecov -f ~/repo/coverage/coverage-final.json
          when: always
      - store_test_results:
          path: ~/repo/coverage
      - store_artifacts:
          path: ~/repo/coverage

  e2e_browserstack:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_bootstrap_build
      - run:
          name: "Create bundles with rollup"
          command: |
            npm run bundle:dist
      - *step_install_e2e_bs
      - *step_serve_e2e_bs
      - run:
          name: Run the e2e tests
          command: |
            cd ./test/e2e
            npm run e2e
      #- run:
      #    name: Generate allure report
      #    command: |
      #      cd ./test/e2e
      #      npm run allure:generate
      #    when: always
      #- store_artifacts:
      #    path: ./test/e2e/allure-report
      #- run:
      #    name: Post the link to allure report in PR comment
      #    command: |
      #      cd ./test/e2e
      #      npm run allure:post
      #    when: always

  e2e_browserstack_compat:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_bootstrap_build
      - run:
          name: "Create bundles with rollup"
          command: |
            npm run bundle:dist
      - *step_install_e2e_bs
      - *step_serve_e2e_bs
      - run:
          name: Run the e2e tests
          command: |
            cd ./test/e2e
            npm run e2e:compat
      #- run:
      #    name: Generate allure report
      #    command: |
      #      cd ./test/e2e
      #      npm run allure:generate
      #    when: always
      #- store_artifacts:
      #    path: ./test/e2e/allure-report

  e2e_benchmark_vnext:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_attach_workspace
      - run:
          name: Install e2e-benchmark/vnext
          command: |
            cd ~/repo/packages/examples/e2e-benchmark
            npm ci
            cd ~/repo/packages/examples/e2e-benchmark/vnext
            npm ci
            npm run build
      - run:
          name: Serve e2e-benchmark/vnext in the background
          background: true
          command: |
            cd ~/repo/packages/examples/e2e-benchmark/vnext
            npm run start
      - run:
          name: Run the e2e tests
          command: |
            cd ~/repo/packages/examples/e2e-benchmark/vnext
            npm run e2e

  e2e_benchmark_vcurrent:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_attach_workspace
      - run:
          name: Install e2e-benchmark/vcurrent
          command: |
            cd ~/repo/packages/examples/e2e-benchmark
            npm ci
            cd ~/repo/packages/examples/e2e-benchmark/vcurrent
            npm ci
            npm run build
      - run:
          name: Serve e2e-benchmark/vcurrent in the background
          background: true
          command: |
            cd ~/repo/packages/examples/e2e-benchmark/vcurrent
            npm run start
      - run:
          name: Run the e2e tests
          command: |
            cd ~/repo/packages/examples/e2e-benchmark/vcurrent
            npm run e2e

  publish_dev:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_attach_workspace
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish to @dev
          command: |
            npm run publish:dev
            npm run upload-dist:dev

  merge_push_release:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_attach_workspace
      - run:
          name: Merge tag into release
          command: |
            git checkout release
            git merge $CIRCLE_TAG --squash --no-ff
            git push

  publish_latest:
    <<: *defaults
    steps:
      - checkout
      - *step_restore_cache
      - *step_attach_workspace
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish to @latest
          command: |
            npm run publish:latest
            npm run upload-dist:latest

workflows:
  version: 2
  # This workflow runs on every commit to any branch (with or without PR)
  build_test:
    jobs:
      - install:
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - install
          filters:
            tags:
              only: /^v.*/
      - unit_tests_chrome:
          requires:
            - install
          filters:
            tags:
              only: /^v.*/
      # Only run the tests in firefox when on master or release (those are the thorough testing branches)
      # - todo: move to browserstack and add more browsers
      - unit_tests_firefox:
          requires:
            - install
          filters:
            branches:
              only:
                - master
                - release
            tags:
              only: /^v.*/
      # This is the "lightweight" browserstack test set (only latest browser / latest OS)
      # It runs on every commit on every non-release branch
      - e2e_browserstack:
          requires:
            - install
          filters:
            branches:
              ignore: release
            tags:
              only: /^v.*/
      # This is the full browserstack test set (last 3 versions of every browser on multiple OSes + OS versions)
      # It runs on every commit to release
      - e2e_browserstack_compat:
          requires:
            - install
          filters:
            branches:
              only: release
      #- e2e_benchmark_vnext:
      #    requires:
      #      - build
      #    filters:
      #      tags:
      #        only: /^v.*/
      # Only run the vCurrent benchmark on commits to master (don't need to refresh data we already have on every commit to every branch)
      #- e2e_benchmark_vcurrent:
      #    requires:
      #      - build
      #    filters:
      #      branches:
      #        only: master
      # Merge the master branch into release
      - merge_push_release:
          requires:
            - build
            - unit_tests_chrome
            - unit_tests_firefox
            - e2e_browserstack
            #- e2e_benchmark_vnext
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish_latest:
          type: approval
          requires:
            - build
            - unit_tests_chrome
            - unit_tests_firefox
            - e2e_browserstack_compat
            #- e2e_benchmark_vnext
          filters:
            branches:
              only: release

  # This workflow runs once per day on 0:00 UTC on the master branch
  build_test_deploy_dev:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - install
      - build:
          requires:
            - install
      - unit_tests_chrome:
          requires:
            - install
      - unit_tests_firefox:
          requires:
            - install
      # We only run the lightweight version of browserstack tests because failing tests on very old browsers shouldn't block a dev publish
      - e2e_browserstack:
          requires:
            - install
      - publish_dev:
          requires:
            - build
            - unit_tests_chrome
            - unit_tests_firefox
            - e2e_browserstack


