name: Trigger pr_full on request

on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: [labeled]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: read

jobs:
  trigger:
    if: >
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '/ci full') &&
       (github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'COLLABORATOR')) ||
      (github.event_name == 'pull_request_review' &&
       contains(github.event.review.body || '', '/ci full') &&
       (github.event.review.author_association == 'MEMBER' ||
        github.event.review.author_association == 'OWNER' ||
        github.event.review.author_association == 'COLLABORATOR')) ||
      (github.event_name == 'pull_request_review_comment' &&
       contains(github.event.comment.body, '/ci full') &&
       (github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'COLLABORATOR')) ||
      (github.event_name == 'pull_request_target' &&
       github.event.action == 'labeled' &&
       github.event.label.name == 'ci:full')

    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR info
        id: head
        uses: actions/github-script@v7
        with:
          script: |
            const ev = context.eventName;
            const prNum =
              context.payload.pull_request?.number ??
              context.issue?.number;

            if (!prNum) {
              core.setFailed('Could not resolve PR number from event payload');
              return;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNum
            });

            const isFork = pr.head.repo.full_name !== `${context.repo.owner}/${context.repo.repo}`;

            core.setOutput('branch', pr.head.ref);
            core.setOutput('sha', pr.head.sha);
            core.setOutput('is_fork', String(isFork));
            core.setOutput('pr', String(pr.number));

            core.info(`PR #${pr.number}: head ${pr.head.repo.full_name}@${pr.head.ref} (${pr.head.sha})`);

      - name: Guard: show note for fork PRs
        if: steps.head.outputs.is_fork == 'true'
        run: |
          echo "::notice::This PR comes from a fork (${GITHUB_REPOSITORY} != ${{ github.event.pull_request.head.repo.full_name }}).
          CircleCI's pipeline trigger API requires a branch in the base repo; the trigger may fail.
          Workarounds: push the branch to the base repo, or have a maintainer mirror the branch."

      - name: Trigger CircleCI pipeline (pr_full)
        env:
          CIRCLECI_TOKEN: ${{ secrets.CIRCLECI_TOKEN }}
          BRANCH: ${{ steps.head.outputs.branch }}
        run: |
          if [ -z "${CIRCLECI_TOKEN}" ]; then
            echo "::error::Missing repository secret CIRCLECI_TOKEN (CircleCI personal API token)."
            exit 1
          fi

          echo "Triggering CircleCI pipeline on ${GITHUB_REPOSITORY}@${BRANCH} with parameters.run_pr_full=true"

          http_code=$(curl -sS -o response.json -w "%{http_code}" -X POST \
            "https://circleci.com/api/v2/project/gh/${GITHUB_REPOSITORY}/pipeline" \
            -H "Circle-Token: ${CIRCLECI_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"branch\":\"${BRANCH}\",\"parameters\":{\"run_pr_full\":true}}")

          echo "HTTP ${http_code}"
          echo "Response:"
          cat response.json || true

          if [ "${http_code}" -lt 200 ] || [ "${http_code}" -ge 300 ]; then
            echo "::error::Failed to trigger CircleCI pipeline. HTTP ${http_code}"
            exit 1
          fi
