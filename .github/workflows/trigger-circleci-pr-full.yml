name: Trigger pr_full on request

on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: [labeled]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  trigger:
    runs-on: ubuntu-latest

    steps:
      - name: Decide whether to trigger pr_full
        id: decide
        uses: actions/github-script@v7
        with:
          script: |
            const isMember = (assoc) => ['MEMBER','OWNER','COLLABORATOR'].includes(assoc || '');
            let ok = false;
            let why = 'no match';

            switch (context.eventName) {
              case 'issue_comment': {
                const body = context.payload.comment?.body || '';
                const assoc = context.payload.comment?.author_association || '';
                const isPR = Boolean(context.payload.issue?.pull_request);
                ok = isPR && body.includes('/ci full') && isMember(assoc);
                why = `issue_comment: isPR=${isPR} assoc=${assoc} bodyMatch=${body.includes('/ci full')}`;
                break;
              }
              case 'pull_request_review': {
                const body = context.payload.review?.body || '';
                const assoc = context.payload.review?.author_association || '';
                ok = body.includes('/ci full') && isMember(assoc);
                why = `pull_request_review: assoc=${assoc} bodyMatch=${body.includes('/ci full')}`;
                break;
              }
              case 'pull_request_review_comment': {
                const body = context.payload.comment?.body || '';
                const assoc = context.payload.comment?.author_association || '';
                ok = body.includes('/ci full') && isMember(assoc);
                why = `pull_request_review_comment: assoc=${assoc} bodyMatch=${body.includes('/ci full')}`;
                break;
              }
              case 'pull_request_target': {
                const label = context.payload.label?.name || '';
                ok = context.payload.action === 'labeled' && label === 'ci:full';
                why = `pull_request_target: label=${label}`;
                break;
              }
              case 'workflow_dispatch': {
                ok = true;
                why = 'manual dispatch';
                break;
              }
            }

            core.info(`decision: ${why}`);
            core.setOutput('should', ok ? 'true' : 'false');

            if (!ok) {
              core.info('Skipping: conditions not met');
            }

      - name: Resolve PR info
        id: head
        if: steps.decide.outputs.should == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNum =
              context.payload.pull_request?.number ??
              context.issue?.number;

            if (!prNum) {
              core.setFailed('Could not resolve PR number from event payload');
              return;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNum
            });

            const isFork = pr.head.repo.full_name !== `${context.repo.owner}/${context.repo.repo}`;

            core.setOutput('branch', pr.head.ref);
            core.setOutput('sha', pr.head.sha);
            core.setOutput('is_fork', String(isFork));
            core.setOutput('pr', String(pr.number));

            core.info(`PR #${pr.number}: head ${pr.head.repo.full_name}@${pr.head.ref} (${pr.head.sha}), isFork=${isFork}`)

      - name: Notice for fork PRs
        if: steps.decide.outputs.should == 'true' && steps.head.outputs.is_fork == 'true'
        run: |
          echo "::notice::This PR comes from a fork (${GITHUB_REPOSITORY} != ${{ github.event.pull_request.head.repo.full_name }}).
          CircleCI's pipeline trigger API requires a branch in the base repo; the trigger may fail.
          Workarounds: push/mirror the branch to the base repo."

      - name: Trigger CircleCI pipeline (pr_full)
        if: steps.decide.outputs.should == 'true'
        env:
          CIRCLECI_TOKEN: ${{ secrets.CIRCLECI_TOKEN }}
          BRANCH: ${{ steps.head.outputs.branch }}
        run: |
          if [ -z "${CIRCLECI_TOKEN}" ]; then
            echo "::error::Missing repository secret CIRCLECI_TOKEN (CircleCI personal API token)."
            exit 1
          fi

          echo "Triggering CircleCI pipeline on ${GITHUB_REPOSITORY}@${BRANCH} with parameters.run_pr_full=true"

          http_code=$(curl -sS -o response.json -w "%{http_code}" -X POST \
            "https://circleci.com/api/v2/project/gh/${GITHUB_REPOSITORY}/pipeline" \
            -H "Circle-Token: ${CIRCLECI_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"branch\":\"${BRANCH}\",\"parameters\":{\"run_pr_full\":true}}")

          echo "HTTP ${http_code}"
          echo "Response:"
          cat response.json || true

          if [ "${http_code}" -lt 200 ] || [ "${http_code}" -ge 300 ]; then
            echo "::error::Failed to trigger CircleCI pipeline. HTTP ${http_code}"
            exit 1
          fi
